/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TagsImport } from './routes/tags'
import { Route as IndexImport } from './routes/index'
import { Route as ContentTypeIdImport } from './routes/content/$typeId'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthProfileImport } from './routes/auth/profile'

// Create/Update Routes

const TagsRoute = TagsImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ContentTypeIdRoute = ContentTypeIdImport.update({
  id: '/content/$typeId',
  path: '/content/$typeId',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/auth/profile',
  path: '/auth/profile',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/tags': {
      id: '/tags'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof TagsImport
      parentRoute: typeof rootRoute
    }
    '/auth/profile': {
      id: '/auth/profile'
      path: '/auth/profile'
      fullPath: '/auth/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/content/$typeId': {
      id: '/content/$typeId'
      path: '/content/$typeId'
      fullPath: '/content/$typeId'
      preLoaderRoute: typeof ContentTypeIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tags': typeof TagsRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/register': typeof AuthRegisterRoute
  '/content/$typeId': typeof ContentTypeIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tags': typeof TagsRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/register': typeof AuthRegisterRoute
  '/content/$typeId': typeof ContentTypeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/tags': typeof TagsRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/register': typeof AuthRegisterRoute
  '/content/$typeId': typeof ContentTypeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tags'
    | '/auth/profile'
    | '/auth/register'
    | '/content/$typeId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tags' | '/auth/profile' | '/auth/register' | '/content/$typeId'
  id:
    | '__root__'
    | '/'
    | '/tags'
    | '/auth/profile'
    | '/auth/register'
    | '/content/$typeId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TagsRoute: typeof TagsRoute
  AuthProfileRoute: typeof AuthProfileRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  ContentTypeIdRoute: typeof ContentTypeIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TagsRoute: TagsRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  ContentTypeIdRoute: ContentTypeIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/tags",
        "/auth/profile",
        "/auth/register",
        "/content/$typeId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/tags": {
      "filePath": "tags.tsx"
    },
    "/auth/profile": {
      "filePath": "auth/profile.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/content/$typeId": {
      "filePath": "content/$typeId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
